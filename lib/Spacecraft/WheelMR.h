//==========================================================================
/*
*    Copyright 2020 Sergio De Florio
*    All rigths reserved
*
*    This file is part of SpOCK
* 
*    SpOCK is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation version 3
* 
*    SpOCK is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*    GNU General Public License for more details.
* 
*    You should have received a copy of the GNU General Public License
*    along with SpOCK. If not, see <https://www.gnu.org/licenses/>.
*
*/
//==========================================================================

#ifndef WHEEL_H
#define WHEEL_H

#include <random>

#include <Subsystem.h>
#include <Transformations.h>
#include <VarTypes.h>
// External libraries
#include <Eigen/Core>

using namespace math;
using namespace std;
using namespace subsystem;

namespace mrwheel
   {
    //------------------------------------------------------------------------------
    //! Class SOLRAD
    //------------------------------------------------------------------------------
    /*!
       Class derived from SUBSYS which implements rate sensor and reaction wheels models
     */
    //------------------------------------------------------------------------------ 
    class MRWHEEL : public SUBSYS
        {
        public:
        //! Constructor.
        /*!
            Using class SUBSYS constructor
          */
        using SUBSYS::SUBSYS;
        //! Destructor.
        ~MRWHEEL();
        //------------------------------------------------------------------------------
        //
        // Class methods specification
        //
        //------------------------------------------------------------------------------
        // Evaluate the operability status (subsystem on or off)
        VectorXd Output(double epoch, const Ref<const VectorXd>& currentstate, const Ref<const VectorXd>& auxstate);
        // Store in clas members constant parameters contained in base class' member vector ConstPrm
        void Init();
        
        public:
        /** Wheel's rotational speed vecor in spacecraft frame.*/
        Vec3d wheelspeed;
        /** Wheel's rotational speed vecor in wheel frame.
              Since the vector is in wheel frame, it will have wheelspeed(0) = 0, wheelspeed(1) = 0 and wheelspeed(2) = rotational speed*/
        Vec3d wheelspeed_SYS;
        /** Vector containing the rotational speed of the wheel commanded by the attitude control system.
              Since the vector is in wheel frame, it will have wheelspeed_SYS(0) = 0, wheelspeed_SYS(1) = 0 and wheelspeed_SYS(2) = commanded rotational speed.*/
        Vec3d wheelspeedCMD;
        /** Vector of angular momentum of the wheel in SC body-fixed frame.*/
        Vec3d hw_SC;
        /** Torque vector generated by the wheel on the spacecraft (SC body-fixed frame).*/
        Vec3d Tw_SC;
        
        private:
        // Evaluate the operability status (subsystem on or off)
        void status(double epoch, const Ref<const VectorXd>& currentstate, const Ref<const VectorXd>& auxstate) ;
        
        private:
        /** Moment of inertia of each wheel (assuming they are equal).*/
        double Iw;
        /** Conversion factor from ontime to dipole produced by a magnetic torquer ( m = ontime2dipole*ontime ).*/
        //double ontime2dipole;
        };

   }; // End of namespace magnetic

#endif
